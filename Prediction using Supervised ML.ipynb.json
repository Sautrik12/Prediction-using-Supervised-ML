{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 1 : Prediction using Supervised ML\n",
    "\n",
    "To Predict the percentage of marks of the students based on the number of hours they studied\n",
    "\n",
    "\n",
    "# Author - Sautrik Ganguly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import linear_model\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "      <th>Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.1</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.5</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.5</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9.2</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5.5</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8.3</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.7</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7.7</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5.9</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4.5</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3.3</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.1</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8.9</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.9</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>6.1</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>7.4</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2.7</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4.8</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>3.8</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>6.9</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>7.8</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Hours  Scores\n",
       "0     2.5      21\n",
       "1     5.1      47\n",
       "2     3.2      27\n",
       "3     8.5      75\n",
       "4     3.5      30\n",
       "5     1.5      20\n",
       "6     9.2      88\n",
       "7     5.5      60\n",
       "8     8.3      81\n",
       "9     2.7      25\n",
       "10    7.7      85\n",
       "11    5.9      62\n",
       "12    4.5      41\n",
       "13    3.3      42\n",
       "14    1.1      17\n",
       "15    8.9      95\n",
       "16    2.5      30\n",
       "17    1.9      24\n",
       "18    6.1      67\n",
       "19    7.4      69\n",
       "20    2.7      30\n",
       "21    4.8      54\n",
       "22    3.8      35\n",
       "23    6.9      76\n",
       "24    7.8      86"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reading the Data\n",
    "\n",
    "df = pd.read_csv('https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the presence of any null value in the Dataset\n",
    "df.isnull == True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 25 entries, 0 to 24\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   Hours   25 non-null     float64\n",
      " 1   Scores  25 non-null     int64  \n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 464.0 bytes\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "      <th>Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Hours</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.976191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Scores</th>\n",
       "      <td>0.976191</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Hours    Scores\n",
       "Hours   1.000000  0.976191\n",
       "Scores  0.976191  1.000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()\n",
    "df.tail()\n",
    "df.describe()\n",
    "df.shape\n",
    "df.info()\n",
    "df.corr()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0xf2e0530>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Scores Vs Hours')\n",
    "plt.xlabel('Hours')\n",
    "plt.ylabel('Scores')\n",
    "plt.scatter(df.Hours,df.Scores,color='red',marker='+')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above scatter plot there looks to be correlation between the 'Scores' and 'Hours', Lets plot a regression line to confirm the correlation.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = linear_model.LinearRegression()\n",
    "reg.fit(df[['Hours']],df.Scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = df['Hours']\n",
    "bins = np.arange(min(data), max(data) + 1, 1)\n",
    "\n",
    "plt.hist(data, bins = bins, density = True)\n",
    "plt.ylabel('Scores')\n",
    "plt.xlabel('Hours')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "      <th>Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Hours</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.976191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Scores</th>\n",
       "      <td>0.976191</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Hours    Scores\n",
       "Hours   1.000000  0.976191\n",
       "Scores  0.976191  1.000000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is confirmed that the variables are positively correlated."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Training the Model "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 1) Splitting the Data\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>6.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>7.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>6.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Hours\n",
       "0     2.5\n",
       "1     5.1\n",
       "2     3.2\n",
       "3     8.5\n",
       "4     3.5\n",
       "5     1.5\n",
       "6     9.2\n",
       "7     5.5\n",
       "8     8.3\n",
       "9     2.7\n",
       "10    7.7\n",
       "11    5.9\n",
       "12    4.5\n",
       "13    3.3\n",
       "14    1.1\n",
       "15    8.9\n",
       "16    2.5\n",
       "17    1.9\n",
       "18    6.1\n",
       "19    7.4\n",
       "20    2.7\n",
       "21    4.8\n",
       "22    3.8\n",
       "23    6.9\n",
       "24    7.8"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df = df.drop('Scores',axis='columns')\n",
    "new_df\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     21\n",
       "1     47\n",
       "2     27\n",
       "3     75\n",
       "4     30\n",
       "5     20\n",
       "6     88\n",
       "7     60\n",
       "8     81\n",
       "9     25\n",
       "10    85\n",
       "11    62\n",
       "12    41\n",
       "13    42\n",
       "14    17\n",
       "15    95\n",
       "16    30\n",
       "17    24\n",
       "18    67\n",
       "19    69\n",
       "20    30\n",
       "21    54\n",
       "22    35\n",
       "23    76\n",
       "24    86\n",
       "Name: Scores, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Scores=df.Scores\n",
    "Scores\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0xf3cfd50>]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Scores Vs Hours')\n",
    "plt.xlabel('Hours')\n",
    "plt.ylabel('Scores')\n",
    "plt.scatter(new_df,Scores,color='red',marker='+')\n",
    "plt.plot(new_df,reg.predict(df[['Hours']]),color='blue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics\n",
    "from sklearn.metrics import r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: {} 4.972805319866374\n",
      "R2-score: 0.95\n"
     ]
    }
   ],
   "source": [
    "y_predict =reg.predict(new_df)\n",
    "y_predict\n",
    "print('Mean Absolute Error: {}',format(metrics.mean_absolute_error(y_predict,Scores)))\n",
    "print(\"R2-score: %.2f\" %r2_score(y_predict,Scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([92.90985477])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicting the Score with the given value of Hours\n",
    "\n",
    "Hours=9.25\n",
    "Predicted_Score = reg.predict([[Hours]])\n",
    "Predicted_Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
